#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import psycopg2
import os
from dotenv import load_dotenv
import random

load_dotenv()

# Po≈ÇƒÖczenie z bazƒÖ danych
DB_URL = os.getenv('DATABASE_URL')

# Lista klub√≥w ze zrzutu
KLUBY = [
    "Rollschool Warszawa",
    "Dragon Roller Club Kyiv", 
    "Rollhouse Warszawa",
    "Crazy Sport Warszawa",
    "Freestyle Roller School",
    "Skating School Zabrze",
    "Czysta Forma P≈Çock",
    "RollMasters Olsztyn",
    "Skating Academy Piaseczno",
    "Black & Yellow Skating Bia≈Çystok",
    "RollRunners Pozna≈Ñ",
    "RollStreet Rzesz√≥w",
    "Niezrzeszony"
]

def utworz_tabele_kluby():
    """Tworzy tabelƒô kluby"""
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    
    print("üè¢ Tworzƒô tabelƒô kluby...")
    
    # Usu≈Ñ tabelƒô je≈õli istnieje
    cur.execute("DROP TABLE IF EXISTS kluby CASCADE")
    
    # Utw√≥rz nowƒÖ tabelƒô kluby
    cur.execute("""
        CREATE TABLE kluby (
            id SERIAL PRIMARY KEY,
            nazwa VARCHAR(100) UNIQUE NOT NULL,
            miasto VARCHAR(50),
            utworzony_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    conn.commit()
    cur.close()
    conn.close()
    print("‚úÖ Tabela kluby utworzona")

def dodaj_kluby():
    """Dodaje kluby do tabeli"""
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    
    print("üìã Dodajƒô kluby...")
    
    for i, klub in enumerate(KLUBY, 1):
        # Okre≈õl miasto na podstawie nazwy klubu
        if "Warszawa" in klub:
            miasto = "Warszawa"
        elif "Kyiv" in klub:
            miasto = "Kyiv"
        elif "Zabrze" in klub:
            miasto = "Zabrze"
        elif "P≈Çock" in klub:
            miasto = "P≈Çock"
        elif "Olsztyn" in klub:
            miasto = "Olsztyn"
        elif "Piaseczno" in klub:
            miasto = "Piaseczno"
        elif "Bia≈Çystok" in klub:
            miasto = "Bia≈Çystok"
        elif "Pozna≈Ñ" in klub:
            miasto = "Pozna≈Ñ"
        elif "Rzesz√≥w" in klub:
            miasto = "Rzesz√≥w"
        else:
            miasto = "Nieznane"
        
        cur.execute("""
            INSERT INTO kluby (nazwa, miasto) 
            VALUES (%s, %s)
        """, (klub, miasto))
        
        print(f"  {i:2d}. {klub} ({miasto})")
    
    conn.commit()
    cur.close()
    conn.close()
    print("‚úÖ Kluby dodane")

def przypisz_zawodnikow_do_klubow():
    """Przypisuje zawodnik√≥w losowo do klub√≥w"""
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    
    print("üë• Przypisujƒô zawodnik√≥w do klub√≥w...")
    
    # Pobierz wszystkich zawodnik√≥w
    cur.execute("SELECT nr_startowy, imie, nazwisko FROM zawodnicy ORDER BY nr_startowy")
    zawodnicy = cur.fetchall()
    
    print(f"üìä Znaleziono {len(zawodnicy)} zawodnik√≥w")
    
    # Przypisz losowo do klub√≥w
    for nr_startowy, imie, nazwisko in zawodnicy:
        klub = random.choice(KLUBY)
        
        cur.execute("""
            UPDATE zawodnicy 
            SET klub = %s 
            WHERE nr_startowy = %s
        """, (klub, nr_startowy))
        
        if nr_startowy % 25 == 0 or nr_startowy <= 5:
            print(f"  {nr_startowy:3d}. {imie} {nazwisko} -> {klub}")
    
    conn.commit()
    cur.close()
    conn.close()
    print("‚úÖ Przypisywanie zawodnik√≥w zako≈Ñczone")

def pokaz_statystyki():
    """Pokazuje statystyki przypisa≈Ñ"""
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    
    print("\nüìä STATYSTYKI KLUB√ìW:")
    print("=" * 60)
    
    # Statystyki zawodnik√≥w w klubach
    cur.execute("""
        SELECT klub, COUNT(*) as liczba_zawodnikow
        FROM zawodnicy 
        GROUP BY klub 
        ORDER BY liczba_zawodnikow DESC, klub
    """)
    
    statystyki = cur.fetchall()
    total_zawodnikow = sum(stat[1] for stat in statystyki)
    
    for i, (klub, liczba) in enumerate(statystyki, 1):
        procent = (liczba / total_zawodnikow) * 100
        print(f"{i:2d}. {klub:<35} {liczba:3d} zawodnik√≥w ({procent:4.1f}%)")
    
    print(f"\nüìà ≈ÅƒÖcznie: {total_zawodnikow} zawodnik√≥w w {len(statystyki)} klubach")
    
    # Podzia≈Ç p≈Çci w ka≈ºdym klubie
    print(f"\nüë• Podzia≈Ç p≈Çci w klubach:")
    cur.execute("""
        SELECT klub, 
               SUM(CASE WHEN plec = 'M' THEN 1 ELSE 0 END) as mezczyzni,
               SUM(CASE WHEN plec = 'K' THEN 1 ELSE 0 END) as kobiety
        FROM zawodnicy 
        GROUP BY klub 
        ORDER BY klub
    """)
    
    for klub, mezczyzni, kobiety in cur.fetchall():
        total_klub = mezczyzni + kobiety
        if total_klub > 0:
            print(f"  {klub:<35} {mezczyzni}M + {kobiety}K = {total_klub}")
    
    cur.close()
    conn.close()

def main():
    print("üè¢ DODAWANIE TABELI KLUBY I PRZYPISYWANIE ZAWODNIK√ìW")
    print("=" * 60)
    
    try:
        # 1. Utw√≥rz tabelƒô kluby
        utworz_tabele_kluby()
        
        # 2. Dodaj kluby
        dodaj_kluby()
        
        # 3. Przypisz zawodnik√≥w do klub√≥w
        przypisz_zawodnikow_do_klubow()
        
        # 4. Poka≈º statystyki
        pokaz_statystyki()
        
        print(f"\nüéâ Proces zako≈Ñczony pomy≈õlnie!")
        print(f"‚úÖ Tabela kluby utworzona")
        print(f"‚úÖ {len(KLUBY)} klub√≥w dodanych")
        print(f"‚úÖ Wszyscy zawodnicy przypisani do klub√≥w")
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd: {e}")

if __name__ == "__main__":
    main() 