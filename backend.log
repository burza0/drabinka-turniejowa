nohup: zignorowane dane wejściowe
✅ Connection pool zainicjalizowany (1-15 połączeń)
✅ Connection pool zainicjalizowany (1-15 połączeń)
🎯 SKATECROSS QR - Połączenie z Supabase PostgreSQL: SUKCES!
👤 SKATECROSS QR - Moduł Zawodników załadowany z Supabase PostgreSQL
🔲 SKATECROSS QR - Moduł QR Generation załadowany z Supabase PostgreSQL
🏁 SKATECROSS QR - Moduł Centrum Startu załadowany z Supabase PostgreSQL
📊 SKATECROSS QR - Moduł Import/Export API załadowany
📦 SKATECROSS QR - API Module Init loaded
🔗 Rejestruję blueprinty SKATECROSS...
✅ Blueprinty SKATECROSS zarejestrowane:
   👤 zawodnicy_bp - /api/zawodnicy/*
   🔲 qr_generation_bp - /api/qr/*
   🏁 centrum_startu_bp - /api/grupy-startowe, /api/scan-qr
   📊 rankingi_bp - /api/rankings/*
   🏆 drabinka_bp - /api/drabinka
   📈 statystyki_bp - /api/kluby, /api/statystyki, /api/kategorie
   🏅 wyniki_bp - /api/wyniki
   📥 import_export_bp - /api/import/*, /api/export/*
   ℹ️ version endpoint - /api/version
 * Serving Flask app 'api_server'
 * Debug mode: on
INFO:werkzeug:[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
INFO:werkzeug:[33mPress CTRL+C to quit[0m
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 358-349-053
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:07:11] "[33mGET /api/version HTTP/1.1[0m" 404 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:07:35] "GET /api/zawodnicy HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:08:49] "GET /api/kluby HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:08:50] "GET /api/zawodnicy HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:08:52] "GET /api/zawodnicy HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:08:59] "GET /api/drabinka HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:02] "GET /api/rankings/individual?season=2025&_t=1750619342417 HTTP/1.1" 200 -
✅ Connection pool zainicjalizowany (1-15 połączeń)
✅ Connection pool zainicjalizowany (1-15 połączeń)
🎯 SKATECROSS QR - Połączenie z Supabase PostgreSQL: SUKCES!
👤 SKATECROSS QR - Moduł Zawodników załadowany z Supabase PostgreSQL
🔲 SKATECROSS QR - Moduł QR Generation załadowany z Supabase PostgreSQL
🏁 SKATECROSS QR - Moduł Centrum Startu załadowany z Supabase PostgreSQL
📊 SKATECROSS QR - Moduł Import/Export API załadowany
📦 SKATECROSS QR - API Module Init loaded
🔗 Rejestruję blueprinty SKATECROSS...
✅ Blueprinty SKATECROSS zarejestrowane:
   👤 zawodnicy_bp - /api/zawodnicy/*
   🔲 qr_generation_bp - /api/qr/*
   🏁 centrum_startu_bp - /api/grupy-startowe, /api/scan-qr
   📊 rankingi_bp - /api/rankings/*
   🏆 drabinka_bp - /api/drabinka
   📈 statystyki_bp - /api/kluby, /api/statystyki, /api/kategorie
   🏅 wyniki_bp - /api/wyniki
   📥 import_export_bp - /api/import/*, /api/export/*
   ℹ️ version endpoint - /api/version
🔍 Wykonuję zapytanie: 
        SELECT id, nr_startowy, imie, nazwisko, kategoria, plec, klub, qr_code, 
               COALESCE(checked_in, false) as checked_in
        FROM zawodnicy 
        ORDER BY nr_startowy 
        LIMIT %s OFFSET %s
     z parametrami: (50, 0)
❌ Błąd podczas wykonywania zapytania: column "id" does not exist
LINE 2:         SELECT id, nr_startowy, imie, nazwisko, kategoria, p...
                       ^

🔍 Wykonuję zapytanie: SELECT DISTINCT klub FROM zawodnicy WHERE klub IS NOT NULL ORDER BY klub
✅ Znaleziono 14 wyników
🔍 Wykonuję zapytanie: 
        SELECT id, nr_startowy, imie, nazwisko, kategoria, plec, klub, qr_code, 
               COALESCE(checked_in, false) as checked_in
        FROM zawodnicy 
        ORDER BY nr_startowy 
        LIMIT %s OFFSET %s
     z parametrami: (50, 0)
❌ Błąd podczas wykonywania zapytania: column "id" does not exist
LINE 2:         SELECT id, nr_startowy, imie, nazwisko, kategoria, p...
                       ^

🔍 Wykonuję zapytanie: 
        SELECT id, nr_startowy, imie, nazwisko, kategoria, plec, klub, qr_code, 
               COALESCE(checked_in, false) as checked_in
        FROM zawodnicy 
        ORDER BY nr_startowy 
        LIMIT %s OFFSET %s
     z parametrami: (50, 0)
❌ Błąd podczas wykonywania zapytania: column "id" does not exist
LINE 2:         SELECT id, nr_startowy, imie, nazwisko, kategoria, p...
                       ^

🔍 Wykonuję zapytanie: 
            SELECT nr_startowy, imie, nazwisko, kategoria, plec, klub,
                   NULL as czas_przejazdu_s, 'WAITING' as status
            FROM zawodnicy
            WHERE kategoria IS NOT NULL AND plec IS NOT NULL
            ORDER BY kategoria, plec, nr_startowy ASC
        
✅ Znaleziono 251 wyników
🔍 Wykonuję zapytanie: 
        WITH wyniki_z_pozycjami AS (
            SELECT 
                w.nr_startowy,
                z.imie, z.nazwisko, z.kategoria, z.plec, z.klub,
                ROW_NUMBER() OVER (
                    PARTITION BY z.kategoria, z.plec 
                    ORDER BY w.czas_przejazdu_s ASC
                ) as pozycja,
                w.czas_przejazdu_s
            FROM wyniki w
            JOIN zawodnicy z ON w.nr_startowy = z.nr_startowy
            WHERE w.status = 'FINISHED' 
                AND w.czas_przejazdu_s IS NOT NULL
        ),
        punkty_zawodnikow AS (
            SELECT 
                nr_startowy, imie, nazwisko, kategoria, plec, klub,
                pozycja,
                CASE 
                    WHEN pozycja <= 32 THEN 
                        CASE pozycja
                            WHEN 1 THEN 100 WHEN 2 THEN 80 WHEN 3 THEN 60 WHEN 4 THEN 50
                            WHEN 5 THEN 45 WHEN 6 THEN 40 WHEN 7 THEN 36 WHEN 8 THEN 32
                            WHEN 9 THEN 29 WHEN 10 THEN 26 WHEN 11 THEN 24 WHEN 12 THEN 22
                            WHEN 13 THEN 20 WHEN 14 THEN 18 WHEN 15 THEN 16 WHEN 16 THEN 15
                            WHEN 17 THEN 14 WHEN 18 THEN 13 WHEN 19 THEN 12 WHEN 20 THEN 11
                            WHEN 21 THEN 10 WHEN 22 THEN 9 WHEN 23 THEN 8 WHEN 24 THEN 7
                            WHEN 25 THEN 6 WHEN 26 THEN 5 WHEN 27 THEN 4 WHEN 28 THEN 3
                            WHEN 29 THEN 2 WHEN 30 THEN 1 WHEN 31 THEN 1 WHEN 32 THEN 1
                            ELSE 0
                        END
                    ELSE 0
                END as punkty,
                czas_przejazdu_s
            FROM wyniki_z_pozycjami
        )
        SELECT 
            nr_startowy, imie, nazwisko, kategoria, plec, klub,
            SUM(punkty) as punkty,
            COUNT(*) as liczba_zawodow,
            MIN(czas_przejazdu_s) as najlepszy_czas
        FROM punkty_zawodnikow
        GROUP BY nr_startowy, imie, nazwisko, kategoria, plec, klub
        ORDER BY punkty DESC, najlepszy_czas ASC
    
✅ Znaleziono 187 wyników
🔍 Wykonuję zapytanie: 
        WITH wyniki_z_pozycjami AS (
            SELECT 
                w.nr_startowy,
                z.imie, z.nazwisko, z.kategoria, z.plec, z.klub,
                ROW_NUMBER() OVER (
                    PARTITION BY z.kategoria, z.plec 
                    ORDER BY w.czas_przejazdu_s ASC
                ) as pozycja,
                w.czas_przejazdu_s
            FROM wyniki w
            JOIN zawodnicy z ON w.nr_startowy = z.nr_startowy
            WHERE w.status = 'FINISHED' 
                AND w.czas_przejazdu_s IS NOT NULL
                AND z.klub IS NOT NULL
        ),
        punkty_zawodnikow AS (
            SELECT 
                klub, kategoria, plec, nr_startowy,
                CASE 
                    WHEN pozycja <= 32 THEN 
                        CASE pozycja
                            WHEN 1 THEN 100 WHEN 2 THEN 80 WHEN 3 THEN 60 WHEN 4 THEN 50
                            WHEN 5 THEN 45 WHEN 6 THEN 40 WHEN 7 THEN 36 WHEN 8 THEN 32
                            WHEN 9 THEN 29 WHEN 10 THEN 26 WHEN 11 THEN 24 WHEN 12 THEN 22
                            WHEN 13 THEN 20 WHEN 14 THEN 18 WHEN 15 THEN 16 WHEN 16 THEN 15
                            WHEN 17 THEN 14 WHEN 18 THEN 13 WHEN 19 THEN 12 WHEN 20 THEN 11
                            WHEN 21 THEN 10 WHEN 22 THEN 9 WHEN 23 THEN 8 WHEN 24 THEN 7
                            WHEN 25 THEN 6 WHEN 26 THEN 5 WHEN 27 THEN 4 WHEN 28 THEN 3
                            WHEN 29 THEN 2 WHEN 30 THEN 1 WHEN 31 THEN 1 WHEN 32 THEN 1
                            ELSE 0
                        END
                    ELSE 0
                END as punkty,
                ROW_NUMBER() OVER (
                    PARTITION BY klub, kategoria, plec 
                    ORDER BY pozycja ASC
                ) as ranking_w_kategorii
            FROM wyniki_z_pozycjami
        ),
        top3_per_category AS (
            SELECT 
                klub, kategoria, plec, punkty
            FROM punkty_zawodnikow
            WHERE ranking_w_kategorii <= 3
        )
        SELECT 
            klub,
            SUM(punkty) as punkty_top3,
            COUNT(DISTINCT CONCAT(kategoria, '_', plec)) as aktywne_kategorie,
            ROUND(AVG(punkty), 1) as balance
        FROM top3_per_category
        GROUP BY klub
        ORDER BY punkty_top3 DESC, aktywne_kategorie DESC
    
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:02] "GET /api/rankings/clubs/top3?season=2025&_t=1750619342417 HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:02] "GET /api/rankings/clubs/total?season=2025&_t=1750619342417 HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:02] "GET /api/rankings/medals?season=2025&_t=1750619342418 HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:02] "GET /api/rankings/general?season=2025&_t=1750619342417 HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:12] "[35m[1mPOST /api/sectro/sessions HTTP/1.1[0m" 201 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:13] "GET /api/sectro/sessions/1/results HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:17] "[33mGET /api/version HTTP/1.1[0m" 404 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:17] "GET /api/grupy-startowe?_t=1750619357272 HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:17] "[33mGET /api/grupa-aktywna?_t=1750619357366 HTTP/1.1[0m" 404 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:17] "[33mGET /api/start-queue/all-group-statuses?_t=1750619357370 HTTP/1.1[0m" 404 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:17] "[33mGET /api/start-queue?_t=1750619357381 HTTP/1.1[0m" 404 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:09:22] "GET /api/zawodnicy HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:15:16] "GET /api/zawodnicy HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:15:19] "[33mGET /api/version HTTP/1.1[0m" 404 -
INFO:werkzeug: * Detected change in '/home/mariusz/projekty/drabinka-turniejowa/backend/api/zawodnicy.py', reloading
🔍 Wykonuję zapytanie: 
        WITH wyniki_z_pozycjami AS (
            SELECT 
                w.nr_startowy,
                z.imie, z.nazwisko, z.kategoria, z.plec, z.klub,
                ROW_NUMBER() OVER (
                    PARTITION BY z.kategoria, z.plec 
                    ORDER BY w.czas_przejazdu_s ASC
                ) as pozycja,
                w.czas_przejazdu_s
            FROM wyniki w
            JOIN zawodnicy z ON w.nr_startowy = z.nr_startowy
            WHERE w.status = 'FINISHED' 
                AND w.czas_przejazdu_s IS NOT NULL
                AND z.klub IS NOT NULL
        ),
        punkty_zawodnikow AS (
            SELECT 
                klub, kategoria, plec, nr_startowy,
                CASE 
                    WHEN pozycja <= 32 THEN 
                        CASE pozycja
                            WHEN 1 THEN 100 WHEN 2 THEN 80 WHEN 3 THEN 60 WHEN 4 THEN 50
                            WHEN 5 THEN 45 WHEN 6 THEN 40 WHEN 7 THEN 36 WHEN 8 THEN 32
                            WHEN 9 THEN 29 WHEN 10 THEN 26 WHEN 11 THEN 24 WHEN 12 THEN 22
                            WHEN 13 THEN 20 WHEN 14 THEN 18 WHEN 15 THEN 16 WHEN 16 THEN 15
                            WHEN 17 THEN 14 WHEN 18 THEN 13 WHEN 19 THEN 12 WHEN 20 THEN 11
                            WHEN 21 THEN 10 WHEN 22 THEN 9 WHEN 23 THEN 8 WHEN 24 THEN 7
                            WHEN 25 THEN 6 WHEN 26 THEN 5 WHEN 27 THEN 4 WHEN 28 THEN 3
                            WHEN 29 THEN 2 WHEN 30 THEN 1 WHEN 31 THEN 1 WHEN 32 THEN 1
                            ELSE 0
                        END
                    ELSE 0
                END as punkty,
                ROW_NUMBER() OVER (
                    PARTITION BY klub, kategoria, plec 
                    ORDER BY pozycja ASC
                ) as ranking_w_kategorii
            FROM wyniki_z_pozycjami
        )
        SELECT 
            klub,
            SUM(punkty) as punkty_total,
            COUNT(DISTINCT CONCAT(kategoria, '_', plec)) as aktywne_kategorie,
            ROUND(AVG(punkty), 1) as balance
        FROM punkty_zawodnikow
        GROUP BY klub
        ORDER BY punkty_total DESC, aktywne_kategorie DESC
    
🔍 Wykonuję zapytanie: 
        WITH wyniki_z_pozycjami AS (
            SELECT 
                w.nr_startowy,
                z.klub,
                ROW_NUMBER() OVER (
                    PARTITION BY z.kategoria, z.plec 
                    ORDER BY w.czas_przejazdu_s ASC
                ) as pozycja
            FROM wyniki w
            JOIN zawodnicy z ON w.nr_startowy = z.nr_startowy
            WHERE w.status = 'FINISHED' 
                AND w.czas_przejazdu_s IS NOT NULL
                AND z.klub IS NOT NULL
        ),
        medale AS (
            SELECT 
                klub,
                SUM(CASE WHEN pozycja = 1 THEN 1 ELSE 0 END) as zlote,
                SUM(CASE WHEN pozycja = 2 THEN 1 ELSE 0 END) as srebrne,
                SUM(CASE WHEN pozycja = 3 THEN 1 ELSE 0 END) as brazowe
            FROM wyniki_z_pozycjami
            WHERE pozycja <= 3
            GROUP BY klub
        )
        SELECT 
            klub,
            zlote,
            srebrne,
            brazowe,
            (zlote + srebrne + brazowe) as lacznie
        FROM medale
        ORDER BY zlote DESC, srebrne DESC, brazowe DESC
    
✅ Znaleziono 13 wyników
✅ Znaleziono 13 wyników
✅ Znaleziono 13 wyników
🔍 Wykonuję zapytanie: 
        WITH wyniki_z_pozycjami AS (
            SELECT 
                w.nr_startowy,
                z.imie, z.nazwisko, z.kategoria, z.plec, z.klub,
                ROW_NUMBER() OVER (
                    PARTITION BY z.kategoria, z.plec 
                    ORDER BY w.czas_przejazdu_s ASC
                ) as pozycja,
                w.czas_przejazdu_s
            FROM wyniki w
            JOIN zawodnicy z ON w.nr_startowy = z.nr_startowy
            WHERE w.status = 'FINISHED' 
                AND w.czas_przejazdu_s IS NOT NULL
        ),
        punkty_zawodnikow AS (
            SELECT 
                nr_startowy, imie, nazwisko, kategoria, plec, klub,
                pozycja,
                CASE 
                    WHEN pozycja <= 32 THEN 
                        CASE pozycja
                            WHEN 1 THEN 100 WHEN 2 THEN 80 WHEN 3 THEN 60 WHEN 4 THEN 50
                            WHEN 5 THEN 45 WHEN 6 THEN 40 WHEN 7 THEN 36 WHEN 8 THEN 32
                            WHEN 9 THEN 29 WHEN 10 THEN 26 WHEN 11 THEN 24 WHEN 12 THEN 22
                            WHEN 13 THEN 20 WHEN 14 THEN 18 WHEN 15 THEN 16 WHEN 16 THEN 15
                            WHEN 17 THEN 14 WHEN 18 THEN 13 WHEN 19 THEN 12 WHEN 20 THEN 11
                            WHEN 21 THEN 10 WHEN 22 THEN 9 WHEN 23 THEN 8 WHEN 24 THEN 7
                            WHEN 25 THEN 6 WHEN 26 THEN 5 WHEN 27 THEN 4 WHEN 28 THEN 3
                            WHEN 29 THEN 2 WHEN 30 THEN 1 WHEN 31 THEN 1 WHEN 32 THEN 1
                            ELSE 0
                        END
                    ELSE 0
                END as punkty,
                czas_przejazdu_s
            FROM wyniki_z_pozycjami
        ),
        ranked AS (
            SELECT *,
                ROW_NUMBER() OVER (PARTITION BY nr_startowy ORDER BY punkty DESC) as rn,
                COUNT(*) OVER (PARTITION BY nr_startowy) as total
            FROM punkty_zawodnikow
        )
        SELECT 
            nr_startowy, imie, nazwisko, kategoria, plec, klub,
            SUM(punkty) as punkty,
            COUNT(*) as liczba_zawodow,
            MIN(czas_przejazdu_s) as najlepszy_czas
        FROM ranked
        WHERE (total <= 2 OR rn <= total - 2)
        GROUP BY nr_startowy, imie, nazwisko, kategoria, plec, klub
        ORDER BY punkty DESC, najlepszy_czas ASC
    
✅ Znaleziono 187 wyników
🔍 Wykonuję zapytanie: 
            SELECT r.*, z.imie, z.nazwisko, z.kategoria, z.plec, z.klub
            FROM sectro_results r
            LEFT JOIN zawodnicy z ON r.nr_startowy = z.nr_startowy
            WHERE r.session_id = %s
            ORDER BY r.total_time ASC
         z parametrami: (1,)
✅ Znaleziono 14 wyników
🔍 Wykonuję zapytanie: 
            SELECT id, nr_startowy, imie, nazwisko, kategoria, plec, klub, qr_code,
                   COALESCE(checked_in, false) as checked_in
            FROM zawodnicy 
            WHERE COALESCE(checked_in, false) = true
            ORDER BY kategoria, plec, nr_startowy
        
❌ Błąd podczas wykonywania zapytania: column "id" does not exist
LINE 2:             SELECT id, nr_startowy, imie, nazwisko, kategori...
                           ^

🔍 Wykonuję zapytanie: 
        SELECT id, nr_startowy, imie, nazwisko, kategoria, plec, klub, qr_code, 
               COALESCE(checked_in, false) as checked_in
        FROM zawodnicy 
        ORDER BY nr_startowy 
        LIMIT %s OFFSET %s
     z parametrami: (50, 0)
❌ Błąd podczas wykonywania zapytania: column "id" does not exist
LINE 2:         SELECT id, nr_startowy, imie, nazwisko, kategoria, p...
                       ^

🔍 Wykonuję zapytanie: 
        SELECT id, nr_startowy, imie, nazwisko, kategoria, plec, klub, qr_code, 
               COALESCE(checked_in, false) as checked_in
        FROM zawodnicy 
        ORDER BY nr_startowy 
        LIMIT %s OFFSET %s
     z parametrami: (50, 0)
❌ Błąd podczas wykonywania zapytania: column "id" does not exist
LINE 2:         SELECT id, nr_startowy, imie, nazwisko, kategoria, p...
                       ^

🧹 Connection pool zamknięty przy shutdown
🧹 Connection pool zamknięty przy shutdown
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 358-349-053
INFO:werkzeug: * Detected change in '/home/mariusz/projekty/drabinka-turniejowa/backend/api/zawodnicy.py', reloading
✅ Connection pool zainicjalizowany (1-15 połączeń)
✅ Connection pool zainicjalizowany (1-15 połączeń)
🎯 SKATECROSS QR - Połączenie z Supabase PostgreSQL: SUKCES!
👤 SKATECROSS QR - Moduł Zawodników załadowany z Supabase PostgreSQL
🔲 SKATECROSS QR - Moduł QR Generation załadowany z Supabase PostgreSQL
🏁 SKATECROSS QR - Moduł Centrum Startu załadowany z Supabase PostgreSQL
📊 SKATECROSS QR - Moduł Import/Export API załadowany
📦 SKATECROSS QR - API Module Init loaded
🔗 Rejestruję blueprinty SKATECROSS...
✅ Blueprinty SKATECROSS zarejestrowane:
   👤 zawodnicy_bp - /api/zawodnicy/*
   🔲 qr_generation_bp - /api/qr/*
   🏁 centrum_startu_bp - /api/grupy-startowe, /api/scan-qr
   📊 rankingi_bp - /api/rankings/*
   🏆 drabinka_bp - /api/drabinka
   📈 statystyki_bp - /api/kluby, /api/statystyki, /api/kategorie
   🏅 wyniki_bp - /api/wyniki
   📥 import_export_bp - /api/import/*, /api/export/*
   ℹ️ version endpoint - /api/version
🧹 Connection pool zamknięty przy shutdown
🧹 Connection pool zamknięty przy shutdown
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 358-349-053
INFO:werkzeug: * Detected change in '/home/mariusz/projekty/drabinka-turniejowa/backend/api/zawodnicy.py', reloading
✅ Connection pool zainicjalizowany (1-15 połączeń)
✅ Connection pool zainicjalizowany (1-15 połączeń)
🎯 SKATECROSS QR - Połączenie z Supabase PostgreSQL: SUKCES!
👤 SKATECROSS QR - Moduł Zawodników załadowany z Supabase PostgreSQL
🔲 SKATECROSS QR - Moduł QR Generation załadowany z Supabase PostgreSQL
🏁 SKATECROSS QR - Moduł Centrum Startu załadowany z Supabase PostgreSQL
📊 SKATECROSS QR - Moduł Import/Export API załadowany
📦 SKATECROSS QR - API Module Init loaded
🔗 Rejestruję blueprinty SKATECROSS...
✅ Blueprinty SKATECROSS zarejestrowane:
   👤 zawodnicy_bp - /api/zawodnicy/*
   🔲 qr_generation_bp - /api/qr/*
   🏁 centrum_startu_bp - /api/grupy-startowe, /api/scan-qr
   📊 rankingi_bp - /api/rankings/*
   🏆 drabinka_bp - /api/drabinka
   📈 statystyki_bp - /api/kluby, /api/statystyki, /api/kategorie
   🏅 wyniki_bp - /api/wyniki
   📥 import_export_bp - /api/import/*, /api/export/*
   ℹ️ version endpoint - /api/version
🧹 Connection pool zamknięty przy shutdown
🧹 Connection pool zamknięty przy shutdown
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 358-349-053
INFO:werkzeug: * Detected change in '/home/mariusz/projekty/drabinka-turniejowa/backend/api_server.py', reloading
✅ Connection pool zainicjalizowany (1-15 połączeń)
✅ Connection pool zainicjalizowany (1-15 połączeń)
🎯 SKATECROSS QR - Połączenie z Supabase PostgreSQL: SUKCES!
👤 SKATECROSS QR - Moduł Zawodników załadowany z Supabase PostgreSQL
🔲 SKATECROSS QR - Moduł QR Generation załadowany z Supabase PostgreSQL
🏁 SKATECROSS QR - Moduł Centrum Startu załadowany z Supabase PostgreSQL
📊 SKATECROSS QR - Moduł Import/Export API załadowany
📦 SKATECROSS QR - API Module Init loaded
🔗 Rejestruję blueprinty SKATECROSS...
✅ Blueprinty SKATECROSS zarejestrowane:
   👤 zawodnicy_bp - /api/zawodnicy/*
   🔲 qr_generation_bp - /api/qr/*
   🏁 centrum_startu_bp - /api/grupy-startowe, /api/scan-qr
   📊 rankingi_bp - /api/rankings/*
   🏆 drabinka_bp - /api/drabinka
   📈 statystyki_bp - /api/kluby, /api/statystyki, /api/kategorie
   🏅 wyniki_bp - /api/wyniki
   📥 import_export_bp - /api/import/*, /api/export/*
   ℹ️ version endpoint - /api/version
🧹 Connection pool zamknięty przy shutdown
🧹 Connection pool zamknięty przy shutdown
INFO:werkzeug: * Restarting with stat
WARNING:werkzeug: * Debugger is active!
INFO:werkzeug: * Debugger PIN: 358-349-053
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:17:23] "[33mGET /api/version HTTP/1.1[0m" 404 -
INFO:werkzeug:127.0.0.1 - - [22/Jun/2025 21:17:26] "GET /api/zawodnicy HTTP/1.1" 200 -
🧹 Connection pool zamknięty przy shutdown
🧹 Connection pool zamknięty przy shutdown
